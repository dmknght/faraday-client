#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''
Faraday Penetration Test IDE - Community Version
Copyright (C) 2013  Infobyte LLC (http://www.infobytesec.com/)
See the file 'doc/LICENSE' for the license information

'''
from __future__ import with_statement
from plugins import core
from model import api
import re
import os
import sys

try:
    import xml.etree.cElementTree as ET
    import xml.etree.ElementTree as ET_ORIG
    ETREE_VERSION = ET_ORIG.VERSION
except ImportError:
    import xml.etree.ElementTree as ET
    ETREE_VERSION = ET.VERSION

ETREE_VERSION = [int(i) for i in ETREE_VERSION.split(".")]

current_path = os.path.abspath(os.getcwd())

__author__     = "Francisco Amato"
__copyright__  = "Copyright (c) 2013, Infobyte LLC"
__credits__    = ["Francisco Amato"]
__license__    = ""
__version__    = "1.0.0"
__maintainer__ = "Francisco Amato"
__email__      = "famato@infobytesec.com"
__status__     = "Development"


class QualysguardXmlParser(object):
    """
    The objective of this class is to parse an xml file generated by the qualysguard tool.

    TODO: Handle errors.
    TODO: Test qualysguard output version. Handle what happens if the parser doesn't support it.
    TODO: Test cases.

    @param qualysguard_xml_filepath A proper xml generated by qualysguard
    """
    def __init__(self, xml_output):
        tree = self.parse_xml(xml_output)
        if tree:
            self.items = [data for data in self.get_items(tree)]
        else:
            self.items = []
            

    def parse_xml(self, xml_output):
        """
        Open and parse an xml file.

        TODO: Write custom parser to just read the nodes that we need instead of
        reading the whole file.

        @return xml_tree An xml tree instance. None if error.
        """
        try:
            tree = ET.fromstring(xml_output)
        except SyntaxError, err:
            self.devlog("SyntaxError: %s. %s" % (err, xml_output))
            return None

        return tree

    def get_items(self, tree):
        """
        @return items A list of Host instances
        """       
        for node in tree.findall("IP"):
            yield Item(node)

                 


class Item(object):
    """
    An abstract representation of a Item


    @param item_node A item_node taken from an qualysguard xml tree
    """
    def __init__(self, item_node):
        self.node = item_node
        self.ip = item_node.get('value')
        self.os = self.get_text_from_subnode("OS")
            
        self.vulns=self.getResults(item_node)
            
    def getResults(self, tree):
        """
        :param tree:
        """
        for self.issues in tree.findall("VULNS/CAT"):
            for v in self.issues.findall("VULN"):
                yield Results(v,self.issues)
        
    def get_text_from_subnode(self, subnode_xpath_expr):
        """
        Finds a subnode in the host node and the retrieves a value from it.

        @return An attribute value
        """
        sub_node = self.node.find(subnode_xpath_expr)
        if sub_node is not None:
            return sub_node.text

        return None

class Results():
    def __init__(self, issue_node,parent):
        self.node = issue_node
        self.port=parent.get('port')
        self.protocol=parent.get('protocol')
        self.name=self.node.get('number')
        self.severity=self.node.get('severity')
        self.title=self.get_text_from_subnode("TITLE")
        self.cvss=self.get_text_from_subnode("CVSS_BASE")
        self.pci=self.get_text_from_subnode("PCI_FLAG")
        self.diagnosis=self.get_text_from_subnode("DIAGNOSIS")
        self.solution=self.get_text_from_subnode("SOLUTION")
        self.result=self.get_text_from_subnode("RESULT")
        self.desc = self.diagnosis
        self.desc += "\nResult: " +self.result if self.result else ""
        
        self.ref=[]
        for r in issue_node.findall("CVE_ID_LIST/CVE_ID"):
            self.node=r
            self.ref.append(self.get_text_from_subnode("ID"))
        for r in issue_node.findall("BUGTRAQ_ID_LIST/BUGTRAQ_ID"):
            self.node=r
            self.ref.append("bid-"+self.get_text_from_subnode("ID"))
               
        

    def get_text_from_subnode(self, subnode_xpath_expr):
        """
        Finds a subnode in the host node and the retrieves a value from it.

        @return An attribute value
        """
        sub_node = self.node.find(subnode_xpath_expr)
        if sub_node is not None:
            return sub_node.text

        return None

class QualysguardPlugin(core.PluginBase):
    """
    Example plugin to parse qualysguard output.
    """
    def __init__(self):
        core.PluginBase.__init__(self)
        self.id              = "Qualysguard"
        self.name            = "Qualysguard XML Output Plugin"
        self.plugin_version         = "0.0.1"
        self.version   = "Qualysguard"
        self.framework_version  = "1.0.0"
        self.options         = None
        self._current_output = None
        self._command_regex  = re.compile(r'^(sudo qualysguard|\.\/qualysguard).*?')

        global current_path
        self._output_file_path = os.path.join(self.data_path,
                                             "qualysguard_output-%s.xml" % self._rid)

    def parseOutputString(self, output, debug = False):
        
                                                                                
        parser = QualysguardXmlParser(output)
        for item in parser.items:
            h_id = self.createAndAddHost(item.ip,item.os)
            i_id = self.createAndAddInterface(h_id, item.ip,ipv4_address=item.ip, hostname_resolution=item.ip)
            
            for v in item.vulns:
                if v.port is None:
                    v_id=self.createAndAddVulnToHost(h_id,v.title,ref=v.ref,severity=v.severity,resolution=v.solution,desc=v.desc)
                else:
                    web=False
                    s_id = self.createAndAddServiceToInterface(h_id, i_id, v.port,
                                                        v.protocol,
                                                        ports = [str(v.port)],
                                                        status = "open")
                    
                    if v.port in ['80','443'] or re.search("ssl|http",v.name):
                        web=True
                    else:
                        web=False
                    
                    if web:
                        v_id=self.createAndAddVulnWebToService(h_id, s_id,v.title,ref=v.ref,website=item.ip,severity=v.severity,desc=v.desc,resolution=v.solution)
                        n_id = self.createAndAddNoteToService(h_id,s_id,"website","")
                        n2_id = self.createAndAddNoteToNote(h_id,s_id,n_id,item.ip,"")
                    else:
                        v_id=self.createAndAddVulnToService(h_id, s_id,v.title,ref=v.ref,severity=v.severity,desc=v.desc,resolution=v.solution)
                                  
                       
                          
             
                                 
                             
                             
        del parser
        
    def processCommandString(self, username, current_path, command_string):
        return None
        

    def setHost(self):
        pass


def createPlugin():
    return QualysguardPlugin()

if __name__ == '__main__':
    parser = QualysguardXmlParser(sys.argv[1])
    for item in parser.items:
        if item.status == 'up':
            print item
