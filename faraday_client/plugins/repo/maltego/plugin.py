#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''
Faraday Penetration Test IDE
Copyright (C) 2013  Infobyte LLC (http://www.infobytesec.com/)
See the file 'doc/LICENSE' for the license information

'''
from __future__ import with_statement
from plugins import core
from model import api
import re
import os
import pprint
import sys

try:
    import xml.etree.cElementTree as ET
    import xml.etree.ElementTree as ET_ORIG
    ETREE_VERSION = ET_ORIG.VERSION
except ImportError:
    import xml.etree.ElementTree as ET
    ETREE_VERSION = ET.VERSION
                      
ETREE_VERSION = [int(i) for i in ETREE_VERSION.split(".")]

current_path = os.path.abspath(os.getcwd())

__author__     = "Francisco Amato"
__copyright__  = "Copyright (c) 2013, Infobyte LLC"
__credits__    = ["Francisco Amato"]
__license__    = ""
__version__    = "1.0.0"
__maintainer__ = "Francisco Amato"
__email__      = "famato@infobytesec.com"
__status__     = "Development"

                           
                                                                     
                      

class MaltegoXmlParser(object):
    """
    The objective of this class is to parse an xml file generated by the maltego tool.

    TODO: Handle errors.
    TODO: Test maltego output version. Handle what happens if the parser doesn't support it.
    TODO: Test cases.

    @param maltego_xml_filepath A proper xml generated by maltego
    """
    def __init__(self, xml_output):
        self.target = None
        self.port = "80"
        self.host = None

        tree = self.parse_xml(xml_output)

        if tree:
            self.items = [data for data in self.get_items(tree)]
        else:
            self.items = []

    def parse_xml(self, xml_output):
        """
        Open and parse an xml file.

        TODO: Write custom parser to just read the nodes that we need instead of
        reading the whole file.

        @return xml_tree An xml tree instance. None if error.
        """
        try:
            tree = ET.fromstring(xml_output)
        except SyntaxError, err:
            print "SyntaxError: %s. %s" % (err, xml_output)
            return None

        return tree

    def get_items(self, tree):
        """
        @return items A list of Host instances
        """
        
                                           
        node = tree.findall('graph')[0]
            
        for n in node.findall('node'):
            yield Item(n)
                                  


                 
def get_attrib_from_subnode(xml_node, subnode_xpath_expr, attrib_name):
    """
    Finds a subnode in the item node and the retrieves a value from it

    @return An attribute value
    """
    global ETREE_VERSION
    node = None
    
    if ETREE_VERSION[0] <= 1 and ETREE_VERSION[1] < 3:
                                                           
        match_obj = re.search("([^\@]+?)\[\@([^=]*?)=\'([^\']*?)\'",subnode_xpath_expr)
        if match_obj is not None:
            node_to_find = match_obj.group(1)
            xpath_attrib = match_obj.group(2)
            xpath_value = match_obj.group(3)
            for node_found in xml_node.findall(node_to_find):
                if node_found.attrib[xpath_attrib] == xpath_value:
                    node = node_found
                    break
        else:
            node = xml_node.find(subnode_xpath_expr)

    else:
        node = xml_node.find(subnode_xpath_expr)

    if node is not None:
        return node.get(attrib_name)

    return None


                 


class Item(object):
    """
    An abstract representation of a Item


    @param item_node A item_node taken from an maltego xml tree
    """
    def __init__(self, item_node):
        self.node = item_node
        self.items =None

        self.id = self.get('id')
        node2 = self.node.findall('data')[0]
        node3 = node2.findall('mtg:MaltegoEntity')[0]
        self.node = node3
        self.type = self.get('type')
        node4 = node3.findall('mtg:Properties')[0]
        for n in node4.findall('mtg:Property'):
            self.node = n
            dname = self.get('displayName')
            value = self.get_text_from_subnode('mtg:Value')
            item = {'dname': dname, 'value' : value}
            self.items.append(item)
        
        
    def do_clean(self,value):
        myreturn =""
        if value is not None:
            myreturn = re.sub("\n","",value)
        return myreturn
        
    def get_text_from_subnode(self, subnode_xpath_expr):
        """
        Finds a subnode in the host node and the retrieves a value from it.

        @return An attribute value
        """
        sub_node = self.node.find(subnode_xpath_expr)
        if sub_node is not None:
            return sub_node.text

        return None



class MaltegoPlugin(core.PluginBase):
    """
    Example plugin to parse maltego output.
    """
    def __init__(self):
        core.PluginBase.__init__(self)
        self.id              = "Maltego"
        self.name            = "Maltego XML Output Plugin"
        self.plugin_version         = "0.0.1"
        self.version   = "3.0.4"
        self.framework_version  = "1.0.0"
        self.options         = None
        self._current_output = None
        self.target = None
        self._command_regex  = re.compile(r'^(sudo maltego|maltego|\.\/maltego).*?')

        global current_path
        self._output_file_path = os.path.join(self.data_path,
                                             "maltego_output-%s.xml" % self._rid)
                                  

    def parseOutputString(self, output, debug = False):
        """
        This method will discard the output the shell sends, it will read it from
        the xml where it expects it to be present.

        NOTE: if 'debug' is true then it is being run from a test case and the
        output being sent is valid.
        """
        parser = MaltegoXmlParser(output)

        for item in parser.items:
            if item.id is not None:
                h_id = self.createAndAddHost(item.id, "unknown")
                i_id = self.createAndAddInterface(h_id, item.id,"00:00:00:00:00:00", item.id)
                for i in item.items:
                    s_id = self.createAndAddServiceToInterface(h_id, i_id, 
                                                        i['dname'],
                                                        "tcp",
                                                        ports = [0],
                                                        status = "status",
                                                        version = "version",
                                                        description = i['value'])

        del parser

    def processCommandString(self, username, current_path, command_string):
        return None

    def setHost(self):
        pass


def createPlugin():
    return MaltegoPlugin()

if __name__ == '__main__':
    parser = MaltegoXmlParser(sys.argv[1])
    for item in parser.items:
        if item.status == 'up':
            print item
